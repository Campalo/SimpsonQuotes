{"version":3,"sources":["logo.svg","Logo.js","Quote.js","Quotes.js","Lamp.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyLogo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","working","state","console","log","_React$createElement","homerDoing","logoDoing","react_default","a","createElement","className","src","logo","alt","defineProperty","bind","toLowerCase","Component","Quote","_ref","quote","character","image","quotes","Quotes","map","quoteItem","index","src_Quote","key","Lamp","on","light","onClick","toUpperCase","NameForm","handleNameChange","event","name","target","value","htmlFor","type","onChange","App","Logo","Form","src_Quotes","src_Lamp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f282e8bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport logo from \"./logo.svg\";\r\n\r\nclass MyLogo extends Component {\r\n  // Thanks to those following lines,\r\n  // the logo rendering now depends on the state,\r\n  // and not on the props any more\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      working: this.props.working\r\n    };\r\n  }\r\n  // There we can modify the state of the logo thanks to setState\r\n  handleClick = () => {\r\n    this.setState({ working: !this.state.working });\r\n    console.log(\"Button Clicked\");\r\n  };\r\n  render() {\r\n    const homerDoing = this.state.working\r\n      ? \"logo whishes to have a break. Click!\"\r\n      : \"Logo is eager to work. Click!\";\r\n    const logoDoing = this.state.working ? \"App-logo\" : \"App-logo-stop\";\r\n\r\n    return (\r\n      <div className=\"My-column\">\r\n        <img src={logo} className={logoDoing} alt=\"React logo\" />\r\n        <button\r\n          className={homerDoing}\r\n          className=\"My-button\"\r\n          onClick={this.handleClick.bind(this)}\r\n        >\r\n          {homerDoing.toLowerCase()}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyLogo;\r\n","import React from \"react\";\r\n\r\nconst Quote = ({ quote, character, image }) => (\r\n  <figure>\r\n    <img src={image} alt={character} />\r\n    <figcaption>\r\n      <blockquote>{quote}</blockquote>\r\n      <cite>{character}</cite>\r\n    </figcaption>\r\n  </figure>\r\n);\r\n\r\nexport default Quote;","import React from \"react\";\r\n// src/Quotes.js\r\n\r\nimport Quote from \"./Quote\";\r\n\r\nconst quotes = [\r\n  {\r\n    quote:\r\n      \"Facts are meaningless. You could use facts to prove anything that's even remotely true.\",\r\n    character: \"Homer Simpson\",\r\n    image:\r\n      \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FHomerSimpson.png?1497567511939\"\r\n  },\r\n  {\r\n    quote: \"Nothing you say can upset us. We're the MTV generation.\",\r\n    character: \"Bart Simpson\",\r\n    image:\r\n      \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FBartSimpson.png?1497567511638\"\r\n  },\r\n  {\r\n    quote: \"That's where I saw the leprechaun...He told me to burn things.\",\r\n    character: \"Ralph Wiggum\",\r\n    image:\r\n      \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FRalphWiggum.png?1497567511523\"\r\n  },\r\n  {\r\n    quote:\r\n      \"Hello, Simpson. I'm riding the bus today because Mother hid my car keys to punish me for talking to a woman on the phone. She was right to do it.\",\r\n    character: \"Principal Skinner\",\r\n    image:\r\n      \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FSeymourSkinner.png?1497567511460\"\r\n  }\r\n];\r\n\r\nconst Quotes = () => (\r\n  <div>\r\n    {quotes.map((quoteItem, index) => (\r\n      <Quote key={\"group\" + index}\r\n        quote={quoteItem.quote}\r\n        character={quoteItem.character}\r\n        image={quoteItem.image}\r\n    />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Quotes;","import React, { Component } from \"react\";\r\n\r\nclass Lamp extends Component {\r\n  // Thanks to those following lines,\r\n  // the lamp rendering now depends on the state,\r\n  // and not on the props any more\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      on: this.props.on\r\n    };\r\n  }\r\n  // There we can modify the state of the lamp thanks to setState\r\n  handleClick = () => {\r\n    this.setState({ on: !this.state.on });\r\n  };\r\n  render() {\r\n    const light = this.state.on ? \"on\" : \"off\";\r\n    return (\r\n      <div className=\"Lamp\">\r\n        {/* button represents the switch */}\r\n        {/* the onClick property has for value a method */}\r\n        <button className={light} onClick={this.handleClick}>\r\n          {light.toUpperCase()}\r\n        </button>\r\n        {/* figure represents the bulb */}\r\n        <figure className={light} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lamp;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NameForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: \"Homer Simpson\" };\r\n  }\r\n\r\n  // update the name in the form based on the new user input\r\n  handleNameChange = event => {\r\n    this.setState({ name: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"My-form\">\r\n        <label htmlFor=\"name\">Name :</label>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.name}\r\n          onChange={this.handleNameChange} \r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NameForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Logo from \"./Logo\";\r\n\r\nimport Quotes from \"./Quotes\";\r\nimport Lamp from \"./Lamp\";\r\nimport NameForm from \"./Form\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    // render() method is used to render some html to the DOM and so to the screen\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Logo />\r\n          <h1 className=\"App-title\">Simpsons Quotes</h1>\r\n          <NameForm />\r\n        </header>\r\n        <Quotes />\r\n        <Lamp />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}